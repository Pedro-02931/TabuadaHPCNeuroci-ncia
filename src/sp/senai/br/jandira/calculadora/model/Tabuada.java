package sp.senai.br.jandira.calculadora.model;

import java.util.stream.IntStream;

/**
 * ðŸ§  ImplementaÃ§Ã£o da tabuada com paralelismo e otimizaÃ§Ã£o HPC.
 *
 * ðŸ”¥ InspiraÃ§Ã£o: Arquitetura \textbf{SIMD (Single Instruction, Multiple Data)} no cÃ©rebro
 * - O cÃ³rtex parietal utiliza o paralelismo, aplicando a mesma operaÃ§Ã£o a mÃºltiplos dados.
 * - Modelado com \texttt{IntStream.parallel()}, que explora o \textbf{multi-threading} da JVM.
 *
 * RepresentaÃ§Ã£o simplificada da funÃ§Ã£o de ativaÃ§Ã£o neural:
 * \[
 * f(i) = multiplicando \times i
 * \]
 * Onde \(i\) representa cada elemento do fluxo paralelo de multiplicadores.
 */
public class Tabuada implements ITabuada {
    private double multiplicando;  // ðŸ”¹ Valor principal da tabuada
    private double minimoMultiplicador;  // ðŸ”¹ Multiplicador inicial
    private double maximoMultiplicador;  // ðŸ”¹ Multiplicador final

    @Override
    public void setMultiplicando(double multiplicando) {
        this.multiplicando = multiplicando;  // ðŸ“Œ "GravaÃ§Ã£o" na memÃ³ria de trabalho
    }

    @Override
    public void setMultiplicadores(double min, double max) {
        if (min > max) throw new IllegalArgumentException("Erro: O multiplicador mÃ­nimo deve ser menor ou igual ao mÃ¡ximo!");
        this.minimoMultiplicador = min;
        this.maximoMultiplicador = max;
    }

    @Override
    public void calcular() {
        System.out.println("\n=== Tabuada de " + multiplicando + " ===");

        // ðŸš€ Processamento paralelo â€“ SimulaÃ§Ã£o de mÃºltiplos neurÃ´nios operando juntos
        IntStream.rangeClosed((int) minimoMultiplicador, (int) maximoMultiplicador)
                .parallel()  // ðŸš€ ExecuÃ§Ã£o em mÃºltiplas threads
                .forEach(i -> System.out.println(multiplicando + " x " + i + " = " + (multiplicando * i)));
    }
}